/*
 * File: app/controller/DayRoundController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('inficare.controller.DayRoundController', {
    extend: 'Ext.app.Controller',

    models: [
        'VisitModel'
    ],
    stores: [
        'DayRoundTreeStore',
        'NurseStore'
    ],
    views: [
        'InfiMainView',
        'VisitInfoEdit'
    ],

    saveVisitComment: function(tool, e, eOpts) {
        alert('save it');
    },

    cancelDayComment: function(tool, e, eOpts) {
        alert('cancel');
    },

    onDayVisitTreeViewBeforeDrop: function(node, data, overModel, dropPosition, dropHandlers, eOpts) {
        console.log('BeforDrop:',data);
        console.log('BeforDrop overModel:',overModel);
        var record=data.records[0];
        data.copy=false;
        if (record.get('rectype') == 31)
        {
            var newRec = record.copy(); //Create a copy of the first record
            newRec.set("rectype",30);
            newRec.set("iconCls","task");
            newRec.set("leaf",true);
            data.records = [newRec];

        }


    },

    onDayVisitTreeViewDrop: function(node, data, overModel, dropPosition, eOpts) {
        console.log('drop',data);

        var record=data.records[0];
        var nurseid;

        if (overModel.get("rectype")==20)
        nurseid = overModel.get("nurseid");
        else
        {
            var parent = overModel.parentNode;
            nurseid = parent.get("nurseid");
        }
        record.beginEdit();
        record.set("datev",overModel.get("datev"));
        record.set("nurseid",nurseid);
        record.set("ap",overModel.get("ap"));
        record.set("roundid",overModel.get("roundid"));
        record.set("parentidv",overModel.get("idv"));
        record.endEdit();

    },

    onCellEditingBeforeEdit: function(editor, e, eOpts) {
        if (e.field == 'visitinfo')
        {
            this.editVisitInfo(editor, e);
            return false;
        }
    },

    onDayVisitTreeSelectionChange: function(model, selected, eOpts) {
        if (selected[0])
        this.displayVisitInfo(selected[0]);

    },

    onVisitInfoEditSaveButtonClick: function(button, e, eOpts) {
        var dialog = this.dayEditView.visitInfoEdit,
            form = dialog.down('form');

        form.updateRecord();
        this.displayVisitInfo(form.getRecord());
        dialog.hide();

    },

    onVisitInfoEditCancelButtonClick: function(button, e, eOpts) {
        var dialog = this.dayEditView.visitInfoEdit;

        dialog.hide();

    },

    onTreepanelLoad: function(treestore, node, records, successful, eOpts) {
        console.log('data loaded:', successful);

        if (successful)
        {
            var root=treestore.getRootNode();
            var res;

            if (root.firstChild == null)
            {
                var dayEditView = Ext.ComponentQuery.query('dayeditview')[0];
                var tree = dayEditView.down('#dayVisitTree');
                var value = dayEditView.down('#visitDateFieldId').getValue();
                var dateStr = Ext.Date.format(value, 'Y-m-d');

                if (dateStr != "")
                {
                    res=Ext.MessageBox.confirm('Confirmez', 'Pas de tournée pour cette date, voulez vous la créer?', function(btn){
                        //The user has accepted to create a new round
                        console.log(btn);
                        if (btn=='yes')
                        {
                            var treeStore = tree.getStore();
                            var rootNode;

                            treeStore.getRootNode().removeAll();
                            treeStore.load({params: {visitDate:dateStr, createRound:'true'}});

                            //                QueryVisitsDb.createRound({visitdate:dateStr});
                        }
                    });
                }
            }
            else
            root.data.allowDrop = false;

        }



    },

    onSaveVisitClick: function(button, e, eOpts) {
        var tree = this.dayEditView.down('#dayVisitTree');
        var dayCommentForm = this.dayEditView.down('#dayCommentId').getForm();

        tree.getStore().sync();

        if (dayCommentForm.isDirty())
        {
            dayCommentForm.submit();
            dayCommentForm.setValues( dayCommentForm.getValues())
            //    dayCommentForm.reset();
        }

    },

    onVisitDateFieldChanged: function(field, newValue, oldValue, eOpts) {
        var tree = this.dayEditView.down('#dayVisitTree');
        var value = field.getValue();
        var dateStr = Ext.Date.format(value, 'Y-m-d');
        var dayCommentForm = this.dayEditView.down('#dayCommentId');
        var treeStore = tree.getStore();

        //Change the date in the ReportController
        inficare.app.getController('ReportController').setReportDate(value);

        treeStore.getRootNode().removeAll();
        treeStore.load({params: {visitDate:dateStr}});
        dayCommentForm.getForm().load({params: {visitDate:dateStr}});

    },

    onSearchPatientBtnIdClick: function(button, e, eOpts) {

        this.searchPatient();

    },

    onSearchPatientFldIdChange: function(field, newValue, oldValue, eOpts) {
        this.searchPatient();

    },

    onRefreshPatientVisitBtnIdClick: function(button, e, eOpts) {
        var grid = button.up('#patientVisitGridId');

        store = grid.getStore();
        store.reload();

    },

    onDelVisitBtnIdClick: function(button, e, eOpts) {
        var ctx = this;
        var treePanel = this.dayEditView.down('#dayVisitTree');
        var sm=treePanel.getSelectionModel();
        var store=treePanel.getStore();
        var record=sm.getSelection()[0];

        if (record.get('rectype') == 30)
        {
            res=Ext.MessageBox.confirm('Confirmez', 'Voulez vous vraiment effacer cette entrée?', function(btn){
                if (btn=='yes')
                {
                    //we must call eraseSelectedPatient with the valid 'this' context.
                    ctx.eraseSelectedVisit.call(ctx, record,store);
                }
            });
        }
    },

    onRefVisitDateFildIdChange: function(field, newValue, oldValue, eOpts) {
        var tree = this.roundSource.down('#refDayVisitTree');
        var value = field.getValue();
        var dateStr = Ext.Date.format(value, 'Y-m-d');
        var treeStore = tree.getStore();

        treeStore.getRootNode().removeAll();
        treeStore.load({params: {visitDate:dateStr}});

    },

    onRefDayVisitTreeLoad: function(treestore, node, records, successful, eOpts) {
        console.log('ref data loaded:', successful);

        if (successful)
        {
            var root=treestore.getRootNode();

        	if (root.firstChild !== null)
            {
        		root.data.allowDrop = false;
            }


        }

    },

    onCopyAllRoundBtnIdClick: function(button, e, eOpts) {
        var sourceStore = this.roundSource.down('#refDayVisitTree').getStore();
        var destStore = this.dayEditView.down('#dayVisitTree').getStore();

        var sourceRoundRoot = sourceStore.getRootNode();
        var destRoundRoot   = destStore.getRootNode();


        if ((sourceRoundRoot !== null) && (destRoundRoot !== null))
        {
            var sourceRoundList = sourceRoundRoot.childNodes;
            var destRoundList = destRoundRoot.childNodes;

            for (i=0; i<sourceRoundList.length; i++)
            {
                var sourceRound = sourceRoundList[i];
                var destNdx = -1;

                for (j=0; j<destRoundList.length; j++)
                {
                    if (sourceRound.get('namev') == destRoundList[j].get('namev'))
                    {
                        destNdx = j;
                        break;
                    }
                }
                if (destNdx >=0)
                {
                    var destRound = destRoundList[destNdx];

                    for (j=0; j<sourceRound.childNodes.length; j++)
                    {
                        var newRec = sourceRound.childNodes[j].copy();
                        newRec.beginEdit();
                        newRec.set("datev",destRound.get("datev"));
                        newRec.set("parentidv",destRound.get("idv"));
                        newRec.endEdit();
                        destRound.appendChild(newRec);
                    }
                }
            }
            sourceRoundRoot.removeAll();

        }




    },

    editVisitInfo: function(editor, e) {

        var dialog = this.dayEditView.visitInfoEdit || (this.dayEditView.visitInfoEdit = Ext.create('widget.visitinfoedit')),
            form = dialog.down('form');

        form.getForm().reset();
        form.loadRecord(e.record);
        dialog.show();

    },

    displayVisitInfo: function(record) {
        var vComment = this.dayEditView.down('#visitinfocard');
        var editBox = vComment.down('#visitinfodisplay');
        var layout = vComment.getLayout();
        var text = record.get('visitinfo');

        editBox.setValue(text);
        layout.setActiveItem(0);

    },

    onLaunch: function() {
        //add 'dayeditview' field to the controller to access the DayEditView quickly
        Ext.applyIf(this, {dayEditView: Ext.ComponentQuery.query('dayeditview')[0]});
        Ext.applyIf(this, {roundSource: Ext.ComponentQuery.query('roundsource')[0]});
        Ext.applyIf(this, {searchFld: Ext.ComponentQuery.query('roundsource #searchPatientFldId')[0]});


    },

    createDateRound: function(btn) {
        //The user has accepted to create a new round
        console.log(btn);
        if (btn=='yes')
        {
            var tree = this.dayEditView.down('#dayVisitTree');
            var value = this.dayEditView.down('#visitDateFieldId').getValue();
            var dateStr = Ext.Date.format(value, 'Y-m-d');

            QueryVisitsDb.createRecord({params: {visitdate:dateStr}});
        }
    },

    searchPatient: function() {

        var searchFld = this.searchFld;
        var store = Ext.getStore('VisitPatientStore');

        store.clearFilter(true);
        store.filter([
            Ext.create('Ext.util.Filter', {property: "namev", value: searchFld.getValue(), anyMatch:true, root: 'data'})
            ]);



    },

    eraseSelectedVisit: function(record, store) {
        //var ndx=store.indexOf(records[0]);

        //This is weird, but I need to copy the stor roxy def to the node model because otherwise
        //the actual proxy is undef
        record.setProxy(store.getProxy());
        record.remove(true);
        store.sync();

    },

    init: function(application) {
        this.control({
            "#visitCommentEdit #saveId": {
                click: this.saveVisitComment
            },
            "#visitCommentEdit #cancelId": {
                click: this.cancelDayComment
            },
            "#dayTreeViewId": {
                beforedrop: this.onDayVisitTreeViewBeforeDrop,
                drop: this.onDayVisitTreeViewDrop
            },
            "#dayVisitTree": {
                beforeedit: this.onCellEditingBeforeEdit,
                selectionchange: this.onDayVisitTreeSelectionChange,
                load: this.onTreepanelLoad
            },
            "visitinfoedit button#saveId": {
                click: this.onVisitInfoEditSaveButtonClick
            },
            "visitinfoedit button#cancelId": {
                click: this.onVisitInfoEditCancelButtonClick
            },
            "#dayEditToolbarId #saveId": {
                click: this.onSaveVisitClick
            },
            "#dayEditViewId #visitDateFieldId": {
                change: this.onVisitDateFieldChanged
            },
            "#searchPatientBtnId": {
                click: this.onSearchPatientBtnIdClick
            },
            "#searchPatientFldId": {
                change: this.onSearchPatientFldIdChange
            },
            "#refreshPatientVisitBtnId": {
                click: this.onRefreshPatientVisitBtnIdClick
            },
            "#delVisitBtnId": {
                click: this.onDelVisitBtnIdClick
            },
            "#refVisitDateFildId": {
                change: this.onRefVisitDateFildIdChange
            },
            "#refDayVisitTree": {
                load: this.onRefDayVisitTreeLoad
            },
            "#copyAllRoundBtnId": {
                click: this.onCopyAllRoundBtnIdClick
            }
        });
    }

});
